#!/bin/sh
# postinst script for ctdb
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


enable_legacy() { # From ctdb/packaging/RPM/ctdb.spec.in
    # If mandatory 00.ctdb event script is not enabled then enable it and
    # some other scripts.  The assumption here is that this is a
    # first-time install or an upgrade to a version that requires event
    # scripts to be enabled via symlinks.
    required_script="00.ctdb"
    required_path="/etc/ctdb/events/legacy/${required_script}.script"
    if [ ! -L "$required_path" ] && [ ! -e "$required_path" ] ; then
        default_scripts="${required_script}
                 01.reclock
                 05.system
                 10.interface
                 "
        for t in $default_scripts ; do
            tgt="/usr/share/ctdb/events/legacy/${t}.script"
            name="/etc/ctdb/events/legacy/${t}.script"
            # Directory is created via install and files
            ln -s "$tgt" "$name"
        done
    fi
}

case "$1" in
    configure)
        enable_legacy
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
